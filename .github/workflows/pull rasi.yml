name: Code Quality Checks

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  code_analysis:
    name: Run PMD and Checkstyle
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- PMD Setup and Execution ---
      - name: Set up Java JDK
        uses: actions/setup-java@v4
        with:
          java-version: '11' # Or your required Java version
          distribution: 'temurin'

      - name: Download PMD
        run: |
          wget https://github.com/pmd/pmd/releases/download/pmd-6.55.0/pmd-bin-6.55.0.zip # Replace with the latest version
          unzip pmd-bin-6.55.0.zip
          echo "PMD downloaded and extracted."

      - name: Run PMD
        run: |
          ./pmd-bin-6.55.0/bin/run.sh pmd -d . -f text -R rulesets/java/quickstart.xml # Adjust ruleset as needed
          echo "PMD analysis completed."

      # --- Checkstyle Setup and Execution ---
      - name: Download Checkstyle
        run: |
          wget https://github.com/checkstyle/checkstyle/releases/download/checkstyle-10.14/checkstyle-10.14.jar # Replace with the latest version
          echo "Checkstyle downloaded."

      - name: Run Checkstyle
        run: |
          java -jar checkstyle-10.14.jar -c /google_checks.xml . # Adjust configuration file as needed
          echo "Checkstyle analysis completed."

      # --- Optional: Annotate Pull Request with Findings ---
      - name: Annotate Pull Request with PMD Results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const output = fs.readFileSync('./pmd-report.txt', 'utf8'); // Assuming PMD outputted to this file
            const lines = output.split('\n');
            const annotations = [];
            for (const line of lines) {
              if (line.includes('.java') && line.includes(':')) {
                const [file, location, message] = line.split(':');
                const [lineNumber, columnNumber] = location.split('.');
                annotations.push({
                  path: file.trim(),
                  start_line: parseInt(lineNumber),
                  end_line: parseInt(lineNumber),
                  start_column: parseInt(columnNumber),
                  end_column: parseInt(columnNumber),
                  annotation_level: 'warning', // Or 'failure' depending on severity
                  message: message.trim()
                });
              }
            }
            if (annotations.length > 0) {
              await github.rest.checks.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'PMD Analysis',
                head_sha: context.payload.pull_request.head.sha,
                status: 'completed',
                conclusion: annotations.length > 0 ? 'failure' : 'success',
                output: {
                  title: 'PMD Issues Found',
                  summary: `PMD found ${annotations.length} issues.`,
                  annotations: annotations.slice(0, 50) // GitHub API limit
                }
              });
            } else {
              await github.rest.checks.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'PMD Analysis',
                head_sha: context.payload.pull_request.head.sha,
                status: 'completed',
                conclusion: 'success',
                output: {
                  title: 'PMD Analysis',
                  summary: 'No PMD issues found.'
                }
              });
            }

      - name: Annotate Pull Request with Checkstyle Results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const output = fs.readFileSync('./checkstyle-report.txt', 'utf8'); // Assuming Checkstyle outputted to this file
            const lines = output.split('\n');
            const annotations = [];
            for (const line of lines) {
              if (line.includes('.java') && line.includes(':')) {
                const parts = line.split(':');
                if (parts.length >= 3) {
                  const file = parts[0].trim();
                  const lineNumber = parseInt(parts[1]);
                  const columnNumber = parseInt(parts[2]);
                  const message = parts.slice(3).join(':').trim();
                  annotations.push({
                    path: file,
                    start_line: lineNumber,
                    end_line: lineNumber,
                    start_column: columnNumber,
                    end_column: columnNumber,
                    annotation_level: 'warning', // Or 'failure'
                    message: message
                  });
                }
              }
            }
            if (annotations.length > 0) {
              await github.rest.checks.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'Checkstyle Analysis',
                head_sha: context.payload.pull_request.head.sha,
                status: 'completed',
                conclusion: annotations.length > 0 ? 'failure' : 'success',
                output: {
                  title: 'Checkstyle Issues Found',
                  summary: `Checkstyle found ${annotations.length} issues.`,
                  annotations: annotations.slice(0, 50)
                }
              });
            } else {
              await github.rest.checks.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'Checkstyle Analysis',
                head_sha: context.payload.pull_request.head.sha,
                status: 'completed',
                conclusion: 'success',
                output: {
                  title: 'Checkstyle Analysis',
                  summary: 'No Checkstyle issues found.'
                }
              });
            }
            
